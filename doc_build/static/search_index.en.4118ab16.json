[{"id":0,"title":"Rexpress API Reference","content":"#\n\n\nOverview#\n\nThis document provides an overview of the ReScript bindings for Express.js, a\nweb application framework for Node.js. These bindings let you build web\napplications in ReScript with a type-safe and functional approach, aligned with\nExpress.js v5.\n\n\nAPI Reference#\n\n\nexpress()#\n\nTo start a new Express application, in JavaScript or TypeScript, it's as simple\nas:\n\nUsing CommonJS:\n\n\n\nOr using ESM:\n\n\n\nIn ReScript, you can do the same with:\n\nFor CommonJS:\n\n\n\nFor ESM:\n\n\n\nWARNING\n\nIt's preferable using the express function, as Node.js now supports ESM imports.\nThe expressCjs function is provided only for backward compatibility with older\nNode.js versions.\n\n\nMiddleware Functions#\n\nExpress middlewares are functions that process incoming requests before they\nreach your route handlers. They can parse request bodies, serve static files, or\nhandle errors. Below are the most common middlewares and their ReScript\nbindings:\n\nexpress.json([options])#\n\nParses incoming requests with JSON payloads and makes the data available on\nreq.body. Use this middleware when you expect clients to send JSON data (e.g.,\nfrom a frontend app).\n\nReScript: jsonParser(~options: {..}=?) => (request, response, unit => unit) =>\nunit\n\nExample:\n\n\n\nexpress.raw([options])#\n\nParses incoming requests with a raw body buffer and makes it available on\nreq.body. This is useful for handling binary uploads or custom body formats.\n\nReScript: rawParser(~options: {..}=?) => (request, response, unit => unit) =>\nunit\n\nExample:\n\n\n\nexpress.Router([options])#\n\nCreates a new router object to modularize your route definitions. Routers help\norganize your application by grouping related routes and middleware.\n\nReScript: Router.make(~options: {..}=?) => Router.t\n\nExample:\n\n\n\nexpress.static(root, [options])#\n\nServes static files such as images, CSS, and JavaScript from a directory. This\nmiddleware is commonly used to serve assets for your frontend.\n\nReScript: static(root: string, ~options: {..}=?) => (request, response, unit =>\nunit) => unit\n\nExample:\n\n\n\nexpress.text([options])#\n\nParses incoming requests with plain text payloads and makes the text available\non req.body. Use this when you expect plain text data (not JSON or form data).\n\nReScript: text(~options: {..}=?) => (request, response, unit => unit) => unit\n\nExample:\n\n\n\nexpress.urlencoded([options])#\n\nParses incoming requests with URL-encoded payloads (as from HTML forms) and\nexposes the data on req.body. Use this middleware for traditional form\nsubmissions.\n\nReScript: urlencoded(~options: {..}=?) => (request, response, unit => unit) =>\nunit\n\nExample:\n\n\n\nINFO\n\nFor details on all available [options], see the Express.js documentation.\n\n\nApplication#\n\nIn Express.js applications, the app object is the main entry point for defining\nroutes and middleware. It provides methods to handle HTTP requests, set up\nmiddleware, and manage application settings.\n\nIn ReScript, you can create an Express application using the express function.\nThe app object is a central part of your application.\n\nExample:\n\n\n\nProperties#\n\napp.locals#\n\nAn object for storing local variables that are scoped to the request and\nresponse objects.\n\nReScript: locals: express => {..}\n\nExample:\n\n\n\n * app.mountpath: The path on which the app is mounted.\n\n\nMore#\n\nCheck out the documentation for the full list of runtime APIs.","routePath":"/api-index","lang":"en","toc":[{"text":"Overview","id":"overview","depth":2,"charIndex":3},{"text":"API Reference","id":"api-reference","depth":2,"charIndex":261},{"text":"`express()`","id":"express","depth":3,"charIndex":-1},{"text":"Middleware Functions","id":"middleware-functions","depth":3,"charIndex":669},{"text":"`express.json([options])`","id":"expressjsonoptions","depth":4,"charIndex":-1},{"text":"`express.raw([options])`","id":"expressrawoptions","depth":4,"charIndex":-1},{"text":"`express.Router([options])`","id":"expressrouteroptions","depth":4,"charIndex":-1},{"text":"`express.static(root, [options])`","id":"expressstaticroot-options","depth":4,"charIndex":-1},{"text":"`express.text([options])`","id":"expresstextoptions","depth":4,"charIndex":-1},{"text":"`express.urlencoded([options])`","id":"expressurlencodedoptions","depth":4,"charIndex":-1},{"text":"Application","id":"application","depth":3,"charIndex":2681},{"text":"Properties","id":"properties","depth":4,"charIndex":3042},{"text":"More","id":"more","depth":2,"charIndex":3265}],"domain":"","frontmatter":{},"version":""},{"id":1,"title":"Getting Started","content":"#\n\n\nSetup environment#\n\nReScrtip can work on modern JavaScript runtimes, including Node.js, Deno, Bun.\n\n\nNode.js#\n\nTo work with Node.js, you must have installed the version 18 or higher. That's\nthe Express version 5 requirement.\n\nCheck your Node.js version with the following command:\n\n\n\nIf you do not have Node.js installed in current environment, or the installed\nversion is too low, you can use nvm to install the latest version of Node.js.\n\n\nCreate a new project#\n\nNavigate to the folder where your project will be created and run the following\ncommand to create a new directory:\n\n\n\nInitialize a package.json file using one of the following commands:\n\n::: code-group\n\n\n\n\n\n\n\n\n\n\n\n:::\n\n\nInstall Dependencies#\n\nInstall Express, ReScript, and Rexpress using your preferred package manager:\n\n::: code-group\n\n\n\n\n\n\n\n\n\n\n\n:::\n\n\nCreate the rescript.json File#\n\nCreate a rescript.json file at the root of your project:\n\n::: code-group\n\n\n\n\n\n:::\n\nIn rescript.json file, add the following content:\n\n\n\nDETAILS\n\nFor a more advanced configuration of the rescript.json file, you can read the\nRescript documentation.\n\n\nHelper commands#\n\nAdd the following scripts to your package.json to compile your .res files to\nJavaScript:\n\n\n\nDETAILS\n\nIf you want more information about how to set up your ReScript project, you can\ncheck the ReScript installation documentation.\n\nNext Steps: You are now ready to start building your ReScript Express app! See\nthe Usage Examples for sample code and patterns.","routePath":"/getting-started","lang":"en","toc":[{"text":"Setup environment","id":"setup-environment","depth":2,"charIndex":3},{"text":"Node.js","id":"nodejs","depth":3,"charIndex":104},{"text":"Create a new project","id":"create-a-new-project","depth":3,"charIndex":445},{"text":"Install Dependencies","id":"install-dependencies","depth":3,"charIndex":687},{"text":"Create the `rescript.json` File","id":"create-the-rescriptjson-file","depth":3,"charIndex":-1},{"text":"Helper commands","id":"helper-commands","depth":3,"charIndex":1102}],"domain":"","frontmatter":{},"version":""},{"id":2,"title":"How to Run","content":"#\n\nFollow these steps to build and run your ReScript Express app:\n\n\nStart the ReScript compiler in development mode#\n\nIf there are any errors, check the output and fix them.\n\n::: code-group\n\n\n\n\n\n\n\n\n\n\n\n:::\n\n\nBuild the JavaScript output for production#\n\nOnce the ReScript check is complete, you can build the compiled JavaScript\nfiles:\n\n::: code-group\n\n\n\n\n\n\n\n\n\n\n\n:::\n\n\nRun your server#\n\nReplace TheNameOfYourFile.js with the actual filename of your compiled server\nfile.\n\n::: code-group\n\n\n\n\n\n\n\n\n\n\n\n:::","routePath":"/how-to-run","lang":"en","toc":[{"text":"Start the ReScript compiler in development mode","id":"start-the-rescript-compiler-in-development-mode","depth":2,"charIndex":67},{"text":"Build the JavaScript output for production","id":"build-the-javascript-output-for-production","depth":2,"charIndex":206},{"text":"Run your server","id":"run-your-server","depth":2,"charIndex":366}],"domain":"","frontmatter":{},"version":""},{"id":4,"title":"Rexpress Usage Examples","content":"#\n\nThis page demonstrates how to use the ReScript bindings for Express.js to build\nbackend applications.\n\n\nThe Classic Hello, World!#\n\n\n\n\nUsing Routers#\n\n\n\n\nHandling POST Requests and JSON Body#\n\n\n\n\nError Handling Middleware#\n\n\n\n\nMore#\n\n * See the API documentation for all available bindings.\n * Check out the Express.js documentation for general usage patterns.","routePath":"/tutorials/examples","lang":"en","toc":[{"text":"The Classic `Hello, World!`","id":"the-classic-hello-world","depth":2,"charIndex":-1},{"text":"Using Routers","id":"using-routers","depth":2,"charIndex":137},{"text":"Handling POST Requests and JSON Body","id":"handling-post-requests-and-json-body","depth":2,"charIndex":156},{"text":"Error Handling Middleware","id":"error-handling-middleware","depth":2,"charIndex":198},{"text":"More","id":"more","depth":2,"charIndex":229}],"domain":"","frontmatter":{},"version":""}]